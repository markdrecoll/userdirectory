{"version":3,"sources":["logo.svg","utils/API.js","App.js","reportWebVitals.js","index.js"],"names":["axios","get","App","useState","userData","setUserData","userInputData","setUserInputData","userFilteredData","setUserFilteredData","useEffect","API","then","users","data","results","sortAlpha","event","prefixToUserData","target","id","newArray","sort","a","b","className","type","onChange","value","tempFilter","filter","user","Object","values","join","toLowerCase","indexOf","onChangeHandler","class","onClick","map","src","picture","thumbnail","alt","name","first","last","email","phone","dob","age","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAAe,I,sBCGA,EACE,WACT,OAAOA,IAAMC,IAAI,0C,OCgIVC,MAhIf,WAAe,MAGkBC,mBAAS,IAH3B,mBAGPC,EAHO,KAGGC,EAHH,OAM4BF,mBAAS,IANrC,mBAMPG,EANO,KAMQC,EANR,OASkCJ,mBAAS,IAT3C,mBASPK,EATO,KASWC,EATX,KAYbC,qBAAW,WACTC,IAAkBC,MAAM,SAACC,GACvBR,EAAYQ,EAAMC,KAAKC,SACvBN,EAAoBI,EAAMC,KAAKC,cAEhC,IAGH,IAUMC,EAAY,SAACC,GAGjB,IAAIC,EAAmB,OAMvB,OAHqBD,EAAME,OAAOC,IAIhC,IAAK,QAGL,IAAK,QACHF,EAAmB,GACnB,MACF,IAAK,MACHA,EAAmB,MAqBvB,IAAIG,EAAWb,EAAiBc,MAhBhC,SAAkBC,EAAGC,GAGnB,MAAsB,SAAnBN,GAAgD,QAAnBA,EACzBK,EAAEL,GAAkBD,EAAME,OAAOC,IAAMI,EAAEN,GAAkBD,EAAME,OAAOC,KAAc,EACtFG,EAAEL,GAAkBD,EAAME,OAAOC,IAAMI,EAAEN,GAAkBD,EAAME,OAAOC,IAAa,EACnF,EAGFG,EAAEN,EAAME,OAAOC,IAAMI,EAAEP,EAAME,OAAOC,KAAc,EAClDG,EAAEN,EAAME,OAAOC,IAAMI,EAAEP,EAAME,OAAOC,IAAa,EAC/C,KAMXX,EAAoB,YAAIY,KAG1B,OACE,sBAAKI,UAAU,MAAf,UACE,kDAGA,wGACA,uBACAC,KAAK,OACLN,GAAG,gBACHO,SAAY,SAAAV,IA7DQ,SAACA,GACvBV,EAAiBU,EAAME,OAAOS,OAC9B,IAAIC,EAAazB,EAAS0B,QAAQ,SAACC,GAEjC,OAAwD,IADzCC,OAAOC,OAAOF,GAAMG,KAAK,IAAIC,cAC9BC,QAAQ9B,EAAc6B,kBAEtC1B,EAAoBoB,GAuDIQ,CAAgBpB,IACtCW,MAAStB,IAET,uBAAM,uBAGN,kCACE,kCACF,+BACE,yCACA,4CACA,2CACA,uCACA,8CACA,wCAEF,+BACE,uBAEA,6BAAI,wBAAQgC,MAAM,2BAA2BC,QAAS,SAAAtB,GAAUD,EAAUC,IAASG,GAAG,QAAlF,+BACJ,6BAAI,wBAAQkB,MAAM,2BAA2BC,QAAS,SAAAtB,GAAUD,EAAUC,IAASG,GAAG,OAAlF,8BACJ,6BAAI,wBAAQkB,MAAM,2BAA2BC,QAAS,SAAAtB,GAAUD,EAAUC,IAASG,GAAG,QAAlF,0BACJ,6BAAI,wBAAQkB,MAAM,2BAA2BC,QAAS,SAAAtB,GAAUD,EAAUC,IAASG,GAAG,QAAlF,iCACJ,6BAAI,wBAAQkB,MAAM,2BAA2BC,QAAS,SAAAtB,GAAUD,EAAUC,IAASG,GAAG,MAAlF,8BAGN,gCACCZ,EAAiBgC,KAAK,SAACT,GACtB,OACA,+BACE,6BAAI,qBAAKU,IAAKV,EAAKW,QAAQC,UAAWC,IAAI,qBAC1C,6BAAKb,EAAKc,KAAKC,QACf,6BAAKf,EAAKc,KAAKE,OACf,6BAAKhB,EAAKiB,QACV,6BAAKjB,EAAKkB,QACV,6BAAKlB,EAAKmB,IAAIC,QANPpB,EAAKiB,mBCvGPI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e9cae842.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\r\n\r\n// https://randomuser.me/ is a website for generating random user data\r\nexport default {\r\n    getUserList: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=50\");\r\n    }\r\n};","import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport API from './utils/API'\n\nfunction App() {\n\n  // create a state for user data\n  const[userData, setUserData] = useState([]);\n\n  // create a state for inputted user data, initialize as empty string\n  const[userInputData, setUserInputData] = useState(\"\");\n\n  // create a state for the filter\n  const[userFilteredData, setUserFilteredData] = useState([]);\n  \n  // on page load run api call to get user data\n  useEffect( () => {\n    API.getUserList().then( (users) => {\n      setUserData(users.data.results);\n      setUserFilteredData(users.data.results);\n    });\n  }, []);\n\n  // when a change event happens, set the userInputData state\n  const onChangeHandler = (event) => {\n    setUserInputData(event.target.value);\n    let tempFilter = userData.filter( (user) => {\n      const values = Object.values(user).join(\"\").toLowerCase();\n      return values.indexOf(userInputData.toLowerCase()) !== -1;\n    })\n    setUserFilteredData(tempFilter);\n  }\n\n  // sorts each user based on what is being compared\n  const sortAlpha = (event) => {\n\n    // first name, last name, and age have prefixes in their data, name and dob respectively\n    let prefixToUserData = \"name\";\n\n    // the button events pass in the id name\n    let typeOfUserData = event.target.id;\n    \n    // the switch cases change it to dob, or blank, the default is set as name above\n    switch(typeOfUserData){\n      case \"email\":\n        prefixToUserData = \"\";\n        break;\n      case \"phone\":\n        prefixToUserData = \"\";\n        break;\n      case \"age\":\n        prefixToUserData = \"dob\";\n        break;      \n    }\n\n    // if one user's attribute is alaphabetically before or after, sort accordingly\n    function compare( a, b ) {\n\n      // if the prefis is name or dob that is passed in before the event.target.id\n      if(prefixToUserData===\"name\" || prefixToUserData===\"dob\"){\n        if ( a[prefixToUserData][event.target.id] < b[prefixToUserData][event.target.id] ){return -1;}\n        if ( a[prefixToUserData][event.target.id] > b[prefixToUserData][event.target.id] ){return 1;}\n        return 0;\n      // for email and phone there is no prefix, so just pass in event.target.id\n      }else{\n        if ( a[event.target.id] < b[event.target.id] ){return -1;}\n        if ( a[event.target.id] > b[event.target.id] ){return 1;}\n        return 0;\n      }\n    }\n\n    // set the userFilteredData that gets output to the new array\n    var newArray = userFilteredData.sort(compare);\n    setUserFilteredData([...newArray]);\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>User Information</h2>\n\n      {/* place for user to input text, on change event calls the onChangeHandler*/}\n      <p>Type in information, and only fields that contain it will be displayed.</p>\n      <input\n      type=\"text\"\n      id=\"userSortInput\"\n      onChange = {event => {onChangeHandler(event)}}\n      value = {userInputData}\n      />\n      <br /><br />\n\n      {/* display the data for only users who pass the filter */}\n      <table>\n        <thead>\n      <tr>\n        <th>Picture</th>\n        <th>First Name</th>\n        <th>Last Name</th>\n        <th>Email</th>\n        <th>Phone Number</th>\n        <th>Age</th>\n      </tr>\n      <tr>\n        <th></th>\n        {/* each button has an id for what will be sorted in the sortAlpha function */}\n        <th><button class=\"btn btn-secondary btn-sm\" onClick={event => {sortAlpha(event)}} id=\"first\">Sort First Name</button></th>\n        <th><button class=\"btn btn-secondary btn-sm\" onClick={event => {sortAlpha(event)}} id=\"last\">Sort Last Name</button></th>\n        <th><button class=\"btn btn-secondary btn-sm\" onClick={event => {sortAlpha(event)}} id=\"email\">Sort Email</button></th>\n        <th><button class=\"btn btn-secondary btn-sm\" onClick={event => {sortAlpha(event)}} id=\"phone\">Sort Phone Number</button></th>\n        <th><button class=\"btn btn-secondary btn-sm\" onClick={event => {sortAlpha(event)}} id=\"age\">Sort Age</button></th>\n      </tr>\n      </thead>\n      <tbody>\n      {userFilteredData.map( (user) => {\n        return(\n        <tr key={user.email}>\n          <td><img src={user.picture.thumbnail} alt=\"user_thumbnail\"></img></td>\n          <td>{user.name.first}</td>\n          <td>{user.name.last}</td>\n          <td>{user.email}</td>\n          <td>{user.phone}</td>\n          <td>{user.dob.age}</td>\n        </tr>\n        )\n        \n      })}\n      </tbody>\n      </table>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}